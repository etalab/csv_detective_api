{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onDrop","acceptedFiles","formData","FormData","append","state","resource_id","name","setState","isLoading","urlo","url","fetch","method","body","then","response","json","result","catch","console","log","handleChange","event","value","target","updateOpenAbout","openAbout","updateOpenPerf","openPerf","handleCSVResponse","detected_type","Object","entries","map","key_value","index","key","getReferenceDatasets","reference_datasets","reference_matched_datasets","matched_datasets","ref_ds_id","col_types","col_types_str","join","column_type_str","length","ref_dataset","href","handlePredictClick","headers","tempo","process","bind","document","title","this","className","size","Row","Group","as","Col","Label","rel","Control","type","placeholder","onChange","block","variant","disabled","onClick","accept","maxSize","getRootProps","getInputProps","isDragActive","isDragReject","rejectedFiles","isFileTooLarge","color","keys","src","collapsed","displayDataTypes","hover","in","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.548b0598.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Table from 'react-bootstrap/Table';\nimport ReactJson from 'react-json-view';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Dropzone from 'react-dropzone'\n\nclass App extends Component {\n  componentDidMount() {\n    document.title = 'CSV Detective API';\n  }\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      formData: {resource_id: ''},\n      openAbout: false,\n      openPerf: false,\n\n      result: \"\",\n      \n    };\n    let tempo = process.env.REACT_APP_API_URL\n    this.url = \"\";\n    if(tempo == null)\n      {\n        this.url = \"http://localhost:5000/csv_detective/\"\n        console.log(this.url)\n      }\n    else\n      this.url = tempo\n    this.handleChange = this.handleChange.bind(this);  \n    this.handlePredictClick = this.handlePredictClick.bind(this);\n  }\n\n  onDrop = (acceptedFiles) => {\n    let formData = new FormData();\n    formData.append('resource_csv', acceptedFiles[0])\n    this.state.formData.resource_id = acceptedFiles[0].name\n    // formData.resource_csv = acceptedFiles[0];\n    this.setState({ isLoading: true });\n    let urlo = this.url;\n    fetch(urlo, \n      {\n        method: 'POST',\n        body: formData\n      })\n      .then(response =>  response.json())\n      .then(result => this.setState({ result, isLoading: false }))\n      .catch(console.log)\n    // console.log(acceptedFiles);\n  }\n\n  handleChange = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n    var formData = this.state.formData;\n    formData[name] = value;\n    this.setState({\n      formData\n    });\n  }\n\n  updateOpenAbout = () =>\n  {\n    this.setState({openAbout: !this.state.openAbout})\n  }\n\n\n  updateOpenPerf = () =>\n  {\n    this.setState({openPerf: !this.state.openPerf})\n  }\n\n  handleCSVResponse = (response, detected_type) =>\n  {\n    if (!(detected_type in response))\n      return null\n    \n    return Object.entries(response[detected_type]).map((key_value, index) =>\n    {\n      return(\n      <tr key={index}>\n        <td>{key_value[0]}</td>\n        <td>{key_value[1]}</td>\n      </tr>\n      )\n    })\n  }\n\n  getReferenceDatasets = (response) =>\n  {\n    let reference_datasets = response.reference_matched_datasets[\"reference_datasets\"];\n    let matched_datasets = response.reference_matched_datasets[\"matched_datasets\"]\n\n    return Object.entries(matched_datasets).map((key_value) =>\n    {\n      let ref_ds_id = key_value[0];  // this is an int\n      let col_types = key_value[1];  // this is a list\n      let col_types_str = col_types.join(\", \");\n      let column_type_str = (col_types.length === 1) ? \"type\" : \"types\";\n      let ref_dataset = reference_datasets[ref_ds_id]\n      return(\n        <p>The column {column_type_str} <b>{col_types_str}</b> could be referenced by the dataset <b><a href={ref_dataset[\"url\"]}>{ref_dataset[\"name\"]}</a></b>.</p>\n      )\n    }\n    )\n  }\n\n  handlePredictClick = (event) => {\n    const formData = this.state.formData;\n    this.setState({ isLoading: true });\n    // this.setState({ open: !this.state.open});\n    formData.resource_id = formData.resource_id !== \"\" ? formData.resource_id : \"1f0ebe13-e1f3-4adb-833a-dfc1ce8020fa\";\n    let urlo = this.url + `?resource_id=${formData.resource_id}`;\n    console.log(urlo)\n    // fetch(`http://localhost:5000/csv_detective/?resource_id=${formData.resource_id}`, \n    fetch(urlo, \n      {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: 'GET'\n      })\n      .then(response =>  response.json())\n      .then(result => this.setState({ result, isLoading: false }))\n      .catch(console.log)\n    console.log(this.state.result)\n  }\n  \n  render() {\n    \n    const isLoading = this.state.isLoading;\n    const formData = this.state.formData;\n    const result = this.state.result;\n    const openAbout = this.state.openAbout;\n    const openPerf = this.state.openPerf;\n    \n    return (\n\n    <Container>\n        <div className=\"title\">\n          <h5>CSV Detective API<sup><font size=\"1\">BETA</font></sup> (Updated 2019-08-21)</h5>\n        </div>\n        <div className=\"input_content\">\n        <Form>\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Label>Enter a <a href=\"https://www.data.gouv.fr\" target=\"_blank\" rel=\"noopener noreferrer\">data.gouv.fr</a> CSV resource ID:</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"e.g., 1f0ebe13-e1f3-4adb-833a-dfc1ce8020fa\"\n                name=\"resource_id\"\n                value={formData.resource_id}\n                onChange={this.handleChange}\n                />\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as ={Col}>\n              <Button\n                  block\n                  variant=\"success\"\n                  disabled={isLoading}\n                  onClick={!isLoading ? this.handlePredictClick : null}>\n                  { isLoading ? 'Making analysis' : 'Submit' }\n              </Button>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Dropzone onDrop={this.onDrop} accept=\"text/csv\" maxSize={5242880}>\n              {({getRootProps, getInputProps, isDragActive, isDragReject, rejectedFiles}) => {\n                const isFileTooLarge = rejectedFiles.length > 0 && rejectedFiles[0].size > 5242880;\n                return(\n                <div {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  {!isDragActive && (<div>Or upload a CSV by clicking or dropping it <font color=\"#0000EE\">here</font> (max 5mb)</div>)}\n                  {isDragActive && !isDragReject && \"Drop it like it's hot!\"}\n                  {isDragReject && \"File type not accepted, sorry!\"}\n                  {isFileTooLarge && (\n                    <div className=\"text-danger mt-2\">\n                      File is too large.\n                    </div>\n                  )}\n                </div> \n                ) \n                }\n                }\n              </Dropzone>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n          </Form.Row>\n        </Form>\n        </div>\n        {\n          (() => {\n            if (result !== \"\" && Object.keys(result[\"metadata\"]).length !== 0)\n            {\n              return(\n              <div className=\"results_content\">\n                  <Row>\n                      <Col><h3>Metadata</h3></Col>\n                  </Row>\n                  <Row>\n                    {\n                      (() => {\n                        if (result !== \"\" && Object.keys(result[\"metadata\"]).length !== 0)\n                        {\n                          return(\n                            <Col>\n                            <ReactJson src={result[\"metadata\"]} collapsed={1} name={false} displayDataTypes={false} />\n                            </Col>\n\n                          )\n                        }\n                      })()\n                    }\n                  </Row>\n              </div>\n              )\n            }\n        })()\n      }\n\n      {\n        (() => {\n          if (result !== \"\") \n          {\n            return(\n            <div className=\"results_content\">\n              <Row>\n                  <Col><h3>Identified Columns (Rule Based)</h3></Col>\n              </Row>\n              <Row>\n                <Col>\n                {\n                  result === \"\" ? null :\n                  (\n                    <Table hover size=\"sm\">\n                    <thead>\n                      <tr>\n                        <th>Column Name</th>\n                        <th>Type Detected</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                    {this.handleCSVResponse(result, \"columns_rb\")}\n                    </tbody>\n                  </Table>\n                  )\n                }\n                </Col>\n              </Row>\n            </div>\n            )\n           }\n        })()\n      } \n\n      {   \n        (() => {\n          if (result !== \"\" && Object.keys(result[\"columns_ml\"]).length !== 0)\n          {\n            return(\n            <div className=\"results_content\">\n              <Row>\n                  <Col><h3>Identified Columns (ML Based)</h3></Col>\n              </Row>\n              <Row>\n                <Col>\n                {\n                  result === \"\" ? null :\n                  (\n                    <Table hover size=\"sm\">\n                    <thead>\n                      <tr>\n                        <th>Column Name</th>\n                        <th>Type Detected</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                    {this.handleCSVResponse(result, \"columns_ml\")}\n                    </tbody>\n                  </Table>\n                  )\n                }\n                </Col>\n              </Row>\n            </div>\n            )\n           }\n        })()\n      } \n\n\n      {\n        (() => {\n          if (result !== \"\")\n        { \n          return(\n            <div className=\"results_content\">\n                <Row>\n                    <Col><h3>Reference Datasets</h3></Col>\n                </Row>\n                <Row>\n                  {\n                    (() => {\n                        if(Object.keys(result[\"reference_matched_datasets\"][\"matched_datasets\"]).length !== 0)\n                        {\n                          return(\n                            <Col>\n                            {this.getReferenceDatasets(result)}\n                            </Col>\n\n                          )\n                        }\n                        else\n                        {\n                          return(<Col>No reference datasets where found for your dataset ¯\\_(ツ)_/¯</Col>)\n                        }\n                    })()\n                  }\n                </Row>\n            </div>\n          )\n        }\n      })()\n      } \n\n       \n        \n        \n        <div className=\"description_content\">\n        <Row>\n            <Col><h3 onClick={this.updateOpenAbout}>About</h3></Col>\n        </Row>\n        <Collapse in={openAbout}>\n          <div>\n          <Row>\n            <Col><h5>What?</h5>\n\n            <a href=\"https://github.com/etalab/csv_detective\">CSV Detective</a> is a tool that gives you information about a CSV, such as its encoding and separator, as well as the type of columns contained inside: whether there are columns containing a <i>SIRET</i> or a <i>SIREN</i> number, a postal code, a department or a commune name, a geographic position, etc. \n            <p>This UI builds on CSV Detective. We improved it, APIfied it, and through this interface, you can get a glimpse of how it works. Also, we added a machine learning model as an alternative  (this is work in progress).\n            </p>\n          </Col>\n          </Row>\n            <Row>\n            <Col><h5>Why?</h5>\n            This tool was developed  with <a href=\"https://www.data.gouv.fr\" target=\"_blank\" rel=\"noopener noreferrer\">data.gouv.fr</a> (DGF) in mind. One of the main tasks of DGF is being a repository of open datasets. These datasets are often contained within CSV files. Knowing what is inside this large collection of CSVs can be useful for several tasks:\n            <ul>\n              <li><b>Enrich</b> the results of DGF <b>search engine</b> with the contents of the CSVs.</li>\n              <li><b>Link datasets together</b> according to their values.</li>\n              <li><b>Link datasets</b> with well-maintained, trustable <b>reference datasets</b>.</li>\n              <li><b>Group datasets together</b> according to their general topic.</li>\n            </ul>\n            </Col>\n            </Row> \n            <Row>\n            <Col><h5>How?</h5>\n            The UI has two modes of functioning: you can enter a DGF resource ID and click the button below   or you can load a CSV file by clicking in the corresponding area. The process in both cases will start automatically.\n            Behind the scenes, CSV Detective has two strategies to detect a column type:\n            <ol>\n              <li><b>Rules + References</b>: using regular expressions and also comparing the values with reference data (e.g., if the value <i>69007</i> appears in a list of postal codes, then it is a postal code.</li>\n              <li><b>Supervised Learning (In progress)</b>: manually tagging columnt types and then determining simple features coupled to the content of the cells themselves to train classification algorithms.</li>\n            </ol>\n            </Col>\n            </Row>\n            <Row><Col><h5>Who?</h5>\n            Etalab's Data Science, Datagouv, and Open Data teams are working on this. The code lives <a href=\"https://github.com/psorianom/csv_detective_api\" target=\"_blank\" rel=\"noopener noreferrer\">here</a> for now.\n            \n            </Col></Row>\n            </div>\n          </Collapse>\n        </div>\n        \n        <div className=\"performance_content\">\n          <Row>\n            <Col><h3 onClick={this.updateOpenPerf}>Current Performance</h3></Col>\n          </Row>\n          <Collapse in={openPerf}>\n          <div>\n            <Row>\n              <Col>\n                <p>Rule Based</p>\n                <img src=\"https://img.shields.io/badge/F--score-84.1-green\" alt=\"F1-score=84.1\"></img>\n              </Col>\n              <Col>\n                <p>Machine Learning Based</p>\n                <img src=\"https://img.shields.io/badge/F--score-87.1-green\" alt=\"F1-score=87.1\"></img>\n              </Col>\n            </Row>\n          </div>\n          </Collapse>\n          \n        </div>\n    </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}