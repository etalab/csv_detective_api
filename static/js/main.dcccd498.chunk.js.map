{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onDrop","acceptedFiles","formData","FormData","append","state","resource_id","name","setState","isLoading","urlo","url","fetch","method","body","then","response","json","result","catch","console","log","handleChange","event","value","target","handleChangeList","extractResourceID","stringo","id","split","substring","length","updateOpenAbout","openAbout","updateOpenPerf","openPerf","handleCSVResponse","detected_type","Object","entries","map","key_value","index","key","getReferenceDatasets","reference_datasets","reference_matched_datasets","matched_datasets","ref_ds_id","col_types","col_types_str","join","column_type_str","ref_dataset","href","handlePredictClick","resource_id_list","resource_chosen","headers","Accept","tempo","process","bind","document","title","this","className","size","Row","Group","as","Col","Label","rel","Control","type","placeholder","onChange","block","variant","disabled","onClick","accept","maxSize","getRootProps","getInputProps","isDragActive","isDragReject","rejectedFiles","isFileTooLarge","color","keys","src","collapsed","displayDataTypes","hover","in","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dcccd498.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport Collapse from \"react-bootstrap/Collapse\";\nimport Table from \"react-bootstrap/Table\";\nimport ReactJson from \"react-json-view\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Dropzone from \"react-dropzone\";\n\nclass App extends Component {\n  componentDidMount() {\n    document.title = \"CSV Detective API\";\n  }\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoading: false,\n      formData: { resource_id: \"\", resource_id_list: \"\" },\n      openAbout: false,\n      resource_chosen: \"\",\n      openPerf: false,\n\n      result: \"\"\n    };\n    let tempo = process.env.REACT_APP_API_URL;\n    this.url = \"\";\n    if (tempo == null) {\n      this.url = \"http://localhost:5000/csv_detective/\";\n      console.log(this.url);\n    } else this.url = tempo;\n    this.handleChange = this.handleChange.bind(this);\n    this.handlePredictClick = this.handlePredictClick.bind(this);\n  }\n\n  onDrop = acceptedFiles => {\n    let formData = new FormData();\n    formData.append(\"resource_csv\", acceptedFiles[0]);\n    this.state.formData.resource_id = acceptedFiles[0].name;\n    // formData.resource_csv = acceptedFiles[0];\n    this.setState({ isLoading: true });\n    let urlo = this.url;\n    fetch(urlo, {\n      method: \"POST\",\n      body: formData\n    })\n      .then(response => response.json())\n      .then(result => this.setState({ result, isLoading: false }))\n      .catch(console.log);\n    // console.log(acceptedFiles);\n  };\n\n  handleChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    var formData = this.state.formData;\n    formData[name] = value;\n    this.setState({\n      formData\n    });\n  };\n\n  handleChangeList = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    var formData = this.state.formData;\n    formData[name] = value;\n    this.setState({\n      formData\n    });\n  };\n\n  extractResourceID = stringo => {\n    let splitted = stringo.split(\"(\");\n    let id = splitted[1];\n    id = id.substring(0, id.length - 1);\n    return id;\n  };\n  split;\n\n  updateOpenAbout = () => {\n    this.setState({ openAbout: !this.state.openAbout });\n  };\n\n  updateOpenPerf = () => {\n    this.setState({ openPerf: !this.state.openPerf });\n  };\n\n  handleCSVResponse = (response, detected_type) => {\n    if (!(detected_type in response)) return null;\n\n    return Object.entries(response[detected_type]).map((key_value, index) => {\n      return (\n        <tr key={index}>\n          <td>{key_value[0]}</td>\n          <td>{key_value[1]}</td>\n        </tr>\n      );\n    });\n  };\n\n  getReferenceDatasets = response => {\n    let reference_datasets =\n      response.reference_matched_datasets[\"reference_datasets\"];\n    let matched_datasets =\n      response.reference_matched_datasets[\"matched_datasets\"];\n\n    return Object.entries(matched_datasets).map(key_value => {\n      let ref_ds_id = key_value[0]; // this is an int\n      let col_types = key_value[1]; // this is a list\n      let col_types_str = col_types.join(\", \");\n      let column_type_str = col_types.length === 1 ? \"type\" : \"types\";\n      let ref_dataset = reference_datasets[ref_ds_id];\n      return (\n        <p>\n          The column {column_type_str} <b>{col_types_str}</b> could be\n          referenced by the dataset{\" \"}\n          <b>\n            <a href={ref_dataset[\"url\"]}>{ref_dataset[\"name\"]}</a>\n          </b>\n          .\n        </p>\n      );\n    });\n  };\n\n  handlePredictClick = event => {\n    const formData = this.state.formData;\n    this.setState({ isLoading: true });\n    let resource_id = \"\";\n    if (\n      formData.resource_id_list !== \"\" &&\n      formData.resource_id_list !== \"Choose...\"\n    ) {\n      resource_id = formData.resource_id_list;\n      resource_id = this.extractResourceID(resource_id);\n    } else {\n      formData.resource_id =\n        formData.resource_id !== \"\"\n          ? formData.resource_id\n          : \"1f0ebe13-e1f3-4adb-833a-dfc1ce8020fa\";\n      resource_id = formData.resource_id;\n    }\n    this.setState({ resource_chosen: resource_id });\n    let urlo = this.url + `?resource_id=${resource_id}`;\n    console.log(urlo);\n    // fetch(`http://localhost:5000/csv_detective/?resource_id=${formData.resource_id}`,\n    fetch(urlo, {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"GET\"\n    })\n      .then(response => response.json())\n      .then(result => this.setState({ result, isLoading: false }))\n      .catch(console.log);\n    console.log(this.state.result);\n  };\n\n  render() {\n    const isLoading = this.state.isLoading;\n    const formData = this.state.formData;\n    const result = this.state.result;\n    const openAbout = this.state.openAbout;\n    const openPerf = this.state.openPerf;\n\n    return (\n      <Container>\n        <div className=\"title\">\n          <h5>\n            CSV Detective API\n            <sup>\n              <font size=\"1\">BETA</font>\n            </sup>{\" \"}\n            (Updated 2019-09-04)\n          </h5>\n        </div>\n        <div className=\"input_content\">\n          <Form>\n            <Form.Row>\n              <Form.Group as={Col}>\n                <Form.Label>\n                  Enter a{\" \"}\n                  <a\n                    href=\"https://www.data.gouv.fr\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    data.gouv.fr\n                  </a>{\" \"}\n                  CSV resource ID:\n                </Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"e.g., 1f0ebe13-e1f3-4adb-833a-dfc1ce8020fa\"\n                  name=\"resource_id\"\n                  value={formData.resource_id}\n                  onChange={this.handleChange}\n                />\n                <div>Or choose one from the examples below:</div>\n                <Form.Control\n                  as=\"select\"\n                  onChange={this.handleChange}\n                  name=\"resource_id_list\"\n                >\n                  <option>Choose...</option>\n                  <option>\n                    Base des permis de construire [Sitadel]\n                    (b326730e-8af7-46ee-a412-00413d7ab7c0)\n                  </option>\n                  <option>\n                    Correspondances-code-insee-code-postal\n                    (6d3428b2-3893-45a1-b404-2522a4e77d41)\n                  </option>\n                  <option>\n                    Données des permis de construire pour les logements\n                    (2ddc97c8-c265-4dfe-a6c4-51f214f54871)\n                  </option>\n                  <option>\n                    Open Food Facts (164c9e57-32a7-4f5b-8891-26af10f91072)\n                  </option>\n                  <option>\n                    Trafic moyen journalier annuel sur le réseau routier\n                    national (72b6729e-c675-41ea-bd41-ea0a0daf5642)\n                  </option>\n                </Form.Control>\n              </Form.Group>\n            </Form.Row>\n            <Form.Row>\n              <Form.Group as={Col}>\n                <Button\n                  block\n                  variant=\"success\"\n                  disabled={isLoading}\n                  onClick={!isLoading ? this.handlePredictClick : null}\n                >\n                  {isLoading ? \"Making analysis\" : \"Submit\"}\n                </Button>\n              </Form.Group>\n            </Form.Row>\n            <Form.Row>\n              <Form.Group as={Col}>\n                <Dropzone\n                  onDrop={this.onDrop}\n                  accept=\"text/csv\"\n                  maxSize={5242880}\n                >\n                  {({\n                    getRootProps,\n                    getInputProps,\n                    isDragActive,\n                    isDragReject,\n                    rejectedFiles\n                  }) => {\n                    const isFileTooLarge =\n                      rejectedFiles.length > 0 &&\n                      rejectedFiles[0].size > 5242880;\n                    return (\n                      <div {...getRootProps()}>\n                        <input {...getInputProps()} />\n                        {!isDragActive && (\n                          <div>\n                            Or upload a CSV by clicking or dropping it (and then\n                            WAITING some time) <font color=\"#0000EE\">here</font>{\" \"}\n                            (max 5mb)\n                          </div>\n                        )}\n                        {isDragActive &&\n                          !isDragReject &&\n                          \"Drop it like it's hot!\"}\n                        {isDragReject && \"File type not accepted, sorry!\"}\n                        {isFileTooLarge && (\n                          <div className=\"text-danger mt-2\">\n                            File is too large.\n                          </div>\n                        )}\n                      </div>\n                    );\n                  }}\n                </Dropzone>\n              </Form.Group>\n            </Form.Row>\n            <Form.Row></Form.Row>\n          </Form>\n        </div>\n        {(() => {\n          if (result !== \"\" && Object.keys(result[\"metadata\"]).length !== 0) {\n            return (\n              <div className=\"input_content\">\n                <Row>\n                  <Col>\n                    <h3>Resource {this.state.resource_chosen}</h3>\n                  </Col>\n                </Row>\n              </div>\n            );\n          }\n        })()}\n\n        {(() => {\n          if (result !== \"\" && Object.keys(result[\"metadata\"]).length !== 0) {\n            return (\n              // <div>\n              //   <h2>{this.resource_chosen}</h2>\n              // </div>\n              <div className=\"results_content\">\n                <Row>\n                  <Col>\n                    <h3>Metadata</h3>\n                  </Col>\n                </Row>\n                <Row>\n                  {(() => {\n                    if (\n                      result !== \"\" &&\n                      Object.keys(result[\"metadata\"]).length !== 0\n                    ) {\n                      return (\n                        <Col>\n                          <ReactJson\n                            src={result[\"metadata\"]}\n                            collapsed={1}\n                            name={false}\n                            displayDataTypes={false}\n                          />\n                        </Col>\n                      );\n                    }\n                  })()}\n                </Row>\n              </div>\n            );\n          }\n        })()}\n\n        {(() => {\n          if (result !== \"\") {\n            return (\n              <div className=\"results_content\">\n                <Row>\n                  <Col>\n                    <h3>Identified Columns (Rule Based)</h3>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col>\n                    {result === \"\" ? null : (\n                      <Table hover size=\"sm\">\n                        <thead>\n                          <tr>\n                            <th>Column Name</th>\n                            <th>Type Detected</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {this.handleCSVResponse(result, \"columns_rb\")}\n                        </tbody>\n                      </Table>\n                    )}\n                  </Col>\n                </Row>\n              </div>\n            );\n          }\n        })()}\n\n        {(() => {\n          if (result !== \"\" && Object.keys(result[\"columns_ml\"]).length !== 0) {\n            return (\n              <div className=\"results_content_ml\">\n                <Row>\n                  <Col>\n                    <h3>Identified Columns (Machine Learning Based)</h3>\n                  </Col>\n                </Row>\n                <Row>\n                  <Col>\n                    {result === \"\" ? null : (\n                      <Table hover size=\"sm\">\n                        <thead>\n                          <tr>\n                            <th>Column Name</th>\n                            <th>Type Detected</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {this.handleCSVResponse(result, \"columns_ml\")}\n                        </tbody>\n                      </Table>\n                    )}\n                  </Col>\n                </Row>\n              </div>\n            );\n          }\n        })()}\n\n        {(() => {\n          if (result !== \"\") {\n            return (\n              <div className=\"results_content\">\n                <Row>\n                  <Col>\n                    <h3>Reference Datasets</h3>\n                  </Col>\n                </Row>\n                <Row>\n                  {(() => {\n                    if (\n                      Object.keys(\n                        result[\"reference_matched_datasets\"][\"matched_datasets\"]\n                      ).length !== 0\n                    ) {\n                      return <Col>{this.getReferenceDatasets(result)}</Col>;\n                    } else {\n                      return (\n                        <Col>\n                          No reference datasets where found for your dataset\n                          ¯\\_(ツ)_/¯\n                        </Col>\n                      );\n                    }\n                  })()}\n                </Row>\n              </div>\n            );\n          }\n        })()}\n\n        <div className=\"description_content\">\n          <Row>\n            <Col>\n              <h3 onClick={this.updateOpenAbout}>About</h3>\n            </Col>\n          </Row>\n          <Collapse in={openAbout}>\n            <div>\n              <Row>\n                <Col>\n                  <h5>What?</h5>\n                  <a href=\"https://github.com/etalab/csv_detective\">\n                    CSV Detective\n                  </a>{\" \"}\n                  is a tool that gives you information about a CSV, such as its\n                  encoding and separator, as well as the type of columns\n                  contained inside: whether there are columns containing a{\" \"}\n                  <i>SIRET</i> or a <i>SIREN</i> number, a postal code, a\n                  department or a commune name, a geographic position, etc.\n                  <p>\n                    This UI builds on CSV Detective. We improved it, APIfied it,\n                    and through this interface, you can get a glimpse of how it\n                    works. Also, we added a machine learning model as an\n                    alternative (this is work in progress).\n                  </p>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <h5>Why?</h5>\n                  This tool was developed with{\" \"}\n                  <a\n                    href=\"https://www.data.gouv.fr\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    data.gouv.fr\n                  </a>{\" \"}\n                  (DGF) in mind. One of the main tasks of DGF is being a\n                  repository of open datasets. These datasets are often\n                  contained within CSV files. Knowing what is inside this large\n                  collection of CSVs can be useful for several tasks:\n                  <ul>\n                    <li>\n                      <b>Enrich</b> the results of DGF <b>search engine</b> with\n                      the contents of the CSVs.\n                    </li>\n                    <li>\n                      <b>Link datasets together</b> according to their values.\n                    </li>\n                    <li>\n                      <b>Link datasets</b> with well-maintained, trustable{\" \"}\n                      <b>reference datasets</b>.\n                    </li>\n                    <li>\n                      <b>Group datasets together</b> according to their general\n                      topic.\n                    </li>\n                  </ul>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <h5>How?</h5>\n                  The UI has two modes of functioning: you can enter a DGF\n                  resource ID and click the button below or you can load a CSV\n                  file by clicking in the corresponding area. The process in\n                  both cases will start automatically. Behind the scenes, CSV\n                  Detective has two strategies to detect a column type:\n                  <ol>\n                    <li>\n                      <b>Rules + References</b>: using regular expressions and\n                      also comparing the values with reference data (e.g., if\n                      the value <i>69007</i> appears in a list of postal codes,\n                      then it is a postal code.\n                    </li>\n                    <li>\n                      <b>Marchine Learning (In progress)</b>: manually tagging\n                      columnt types and then determining simple features coupled\n                      to the content of the cells themselves to train\n                      classification algorithms.\n                    </li>\n                  </ol>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  <h5>Who?</h5>\n                  Etalab's Data Science, Datagouv, and Open Data teams are\n                  working on this. The code lives{\" \"}\n                  <a\n                    href=\"https://github.com/psorianom/csv_detective_api\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    here\n                  </a>{\" \"}\n                  for now.\n                </Col>\n              </Row>\n            </div>\n          </Collapse>\n        </div>\n\n        <div className=\"performance_content\">\n          <Row>\n            <Col>\n              <h3 onClick={this.updateOpenPerf}>Current Performance</h3>\n            </Col>\n          </Row>\n          <Collapse in={openPerf}>\n            <div>\n              <Row>\n                <Col>\n                  <p>Rule Based</p>\n                  <img\n                    src=\"https://img.shields.io/badge/F--score-84.1-green\"\n                    alt=\"F1-score=84.1\"\n                  ></img>\n                </Col>\n                <Col>\n                  <p>Machine Learning Based</p>\n                  <img\n                    src=\"https://img.shields.io/badge/F--score-87.1-green\"\n                    alt=\"F1-score=87.1\"\n                  ></img>\n                </Col>\n              </Row>\n            </div>\n          </Collapse>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}